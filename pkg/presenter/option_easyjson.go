// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package presenter

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	access "github.com/travelgateX/presenters-benchmark/pkg/access"
	domainHotelCommon "github.com/travelgateX/presenters-benchmark/pkg/domainHotelCommon"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgPresenter(in *jlexer.Lexer, out *optionsGen) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgPresenter(out *jwriter.Writer, in optionsGen) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v optionsGen) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgPresenter(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v optionsGen) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgPresenter(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *optionsGen) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgPresenter(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *optionsGen) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgPresenter(l, v)
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgPresenter1(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			easyjson2f5a9aebDecode(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgPresenter1(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncode(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgPresenter1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgPresenter1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgPresenter1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgPresenter1(l, v)
}
func easyjson2f5a9aebDecode(in *jlexer.Lexer, out *struct {
	HotelX struct {
		Search struct {
			Options []*Option `json:"options"`
			Errors  struct {
				Code        string `json:"code"`
				Type        string `json:"type"`
				Description string `json:"description"`
			} `json:"errors"`
		} `json:"search"`
	} `json:"hotelX"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hotelX":
			easyjson2f5a9aebDecode1(in, &out.HotelX)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncode(out *jwriter.Writer, in struct {
	HotelX struct {
		Search struct {
			Options []*Option `json:"options"`
			Errors  struct {
				Code        string `json:"code"`
				Type        string `json:"type"`
				Description string `json:"description"`
			} `json:"errors"`
		} `json:"search"`
	} `json:"hotelX"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hotelX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncode1(out, in.HotelX)
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecode1(in *jlexer.Lexer, out *struct {
	Search struct {
		Options []*Option `json:"options"`
		Errors  struct {
			Code        string `json:"code"`
			Type        string `json:"type"`
			Description string `json:"description"`
		} `json:"errors"`
	} `json:"search"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "search":
			easyjson2f5a9aebDecode2(in, &out.Search)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncode1(out *jwriter.Writer, in struct {
	Search struct {
		Options []*Option `json:"options"`
		Errors  struct {
			Code        string `json:"code"`
			Type        string `json:"type"`
			Description string `json:"description"`
		} `json:"errors"`
	} `json:"search"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"search\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncode2(out, in.Search)
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecode2(in *jlexer.Lexer, out *struct {
	Options []*Option `json:"options"`
	Errors  struct {
		Code        string `json:"code"`
		Type        string `json:"type"`
		Description string `json:"description"`
	} `json:"errors"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				in.Delim('[')
				if out.Options == nil {
					if !in.IsDelim(']') {
						out.Options = make([]*Option, 0, 8)
					} else {
						out.Options = []*Option{}
					}
				} else {
					out.Options = (out.Options)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Option
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Option)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Options = append(out.Options, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errors":
			easyjson2f5a9aebDecode3(in, &out.Errors)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncode2(out *jwriter.Writer, in struct {
	Options []*Option `json:"options"`
	Errors  struct {
		Code        string `json:"code"`
		Type        string `json:"type"`
		Description string `json:"description"`
	} `json:"errors"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Options == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Options {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncode3(out, in.Errors)
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecode3(in *jlexer.Lexer, out *struct {
	Code        string `json:"code"`
	Type        string `json:"type"`
	Description string `json:"description"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncode3(out *jwriter.Writer, in struct {
	Code        string `json:"code"`
	Type        string `json:"type"`
	Description string `json:"description"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgPresenter2(in *jlexer.Lexer, out *Option) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "supplierCode":
			out.Supplier = string(in.String())
		case "accessCode":
			out.Access = string(in.String())
		case "market":
			out.Market = string(in.String())
		case "hotelCode":
			out.HotelCode = string(in.String())
		case "hotelName":
			if in.IsNull() {
				in.Skip()
				out.HotelName = nil
			} else {
				if out.HotelName == nil {
					out.HotelName = new(string)
				}
				*out.HotelName = string(in.String())
			}
		case "boardCode":
			if in.IsNull() {
				in.Skip()
				out.BoardCode = nil
			} else {
				if out.BoardCode == nil {
					out.BoardCode = new(string)
				}
				*out.BoardCode = string(in.String())
			}
		case "BoardCodeOriginal":
			out.BoardCodeOriginal = string(in.String())
		case "status":
			out.Status = domainHotelCommon.StatusType(in.String())
		case "occupancies":
			if in.IsNull() {
				in.Skip()
				out.Occupancies = nil
			} else {
				in.Delim('[')
				if out.Occupancies == nil {
					if !in.IsDelim(']') {
						out.Occupancies = make([]domainHotelCommon.Occupancy, 0, 2)
					} else {
						out.Occupancies = []domainHotelCommon.Occupancy{}
					}
				} else {
					out.Occupancies = (out.Occupancies)[:0]
				}
				for !in.IsDelim(']') {
					var v4 domainHotelCommon.Occupancy
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon(in, &v4)
					out.Occupancies = append(out.Occupancies, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rooms":
			if in.IsNull() {
				in.Skip()
				out.Rooms = nil
			} else {
				in.Delim('[')
				if out.Rooms == nil {
					if !in.IsDelim(']') {
						out.Rooms = make([]domainHotelCommon.Room, 0, 1)
					} else {
						out.Rooms = []domainHotelCommon.Room{}
					}
				} else {
					out.Rooms = (out.Rooms)[:0]
				}
				for !in.IsDelim(']') {
					var v5 domainHotelCommon.Room
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon1(in, &v5)
					out.Rooms = append(out.Rooms, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "price":
			easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(in, &out.Price)
		case "supplements":
			if in.IsNull() {
				in.Skip()
				out.Supplements = nil
			} else {
				in.Delim('[')
				if out.Supplements == nil {
					if !in.IsDelim(']') {
						out.Supplements = make([]*domainHotelCommon.Supplement, 0, 8)
					} else {
						out.Supplements = []*domainHotelCommon.Supplement{}
					}
				} else {
					out.Supplements = (out.Supplements)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *domainHotelCommon.Supplement
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(domainHotelCommon.Supplement)
						}
						easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon3(in, v6)
					}
					out.Supplements = append(out.Supplements, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "surcharges":
			if in.IsNull() {
				in.Skip()
				out.Surcharges = nil
			} else {
				in.Delim('[')
				if out.Surcharges == nil {
					if !in.IsDelim(']') {
						out.Surcharges = make([]domainHotelCommon.Surcharge, 0, 1)
					} else {
						out.Surcharges = []domainHotelCommon.Surcharge{}
					}
				} else {
					out.Surcharges = (out.Surcharges)[:0]
				}
				for !in.IsDelim(']') {
					var v7 domainHotelCommon.Surcharge
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon4(in, &v7)
					out.Surcharges = append(out.Surcharges, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rateRules":
			if in.IsNull() {
				in.Skip()
				out.RateRules = nil
			} else {
				in.Delim('[')
				if out.RateRules == nil {
					if !in.IsDelim(']') {
						out.RateRules = make([]access.RateRulesType, 0, 4)
					} else {
						out.RateRules = []access.RateRulesType{}
					}
				} else {
					out.RateRules = (out.RateRules)[:0]
				}
				for !in.IsDelim(']') {
					var v8 access.RateRulesType
					v8 = access.RateRulesType(in.String())
					out.RateRules = append(out.RateRules, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancelPolicy":
			if in.IsNull() {
				in.Skip()
				out.CancelPolicy = nil
			} else {
				if out.CancelPolicy == nil {
					out.CancelPolicy = new(domainHotelCommon.CancelPolicy)
				}
				easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon5(in, out.CancelPolicy)
			}
		case "remarks":
			if in.IsNull() {
				in.Skip()
				out.Remarks = nil
			} else {
				if out.Remarks == nil {
					out.Remarks = new(string)
				}
				*out.Remarks = string(in.String())
			}
		case "id":
			out.OptionID = string(in.String())
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgPresenter2(out *jwriter.Writer, in Option) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"supplierCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Supplier))
	}
	{
		const prefix string = ",\"accessCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Access))
	}
	{
		const prefix string = ",\"market\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Market))
	}
	{
		const prefix string = ",\"hotelCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HotelCode))
	}
	{
		const prefix string = ",\"hotelName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.HotelName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.HotelName))
		}
	}
	{
		const prefix string = ",\"boardCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BoardCode == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.BoardCode))
		}
	}
	{
		const prefix string = ",\"BoardCodeOriginal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BoardCodeOriginal))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"occupancies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Occupancies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Occupancies {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon(out, v10)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"rooms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Rooms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Rooms {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon1(out, v12)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(out, in.Price)
	}
	{
		const prefix string = ",\"supplements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Supplements == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Supplements {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon3(out, *v14)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"surcharges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Surcharges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Surcharges {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon4(out, v16)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"rateRules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RateRules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.RateRules {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cancelPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CancelPolicy == nil {
			out.RawString("null")
		} else {
			easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon5(out, *in.CancelPolicy)
		}
	}
	{
		const prefix string = ",\"remarks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Remarks == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Remarks))
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OptionID))
	}
	{
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Option) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgPresenter2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Option) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgPresenter2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Option) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgPresenter2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Option) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgPresenter2(l, v)
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon5(in *jlexer.Lexer, out *domainHotelCommon.CancelPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "refundable":
			out.Refundable = bool(in.Bool())
		case "cancelPenalties":
			if in.IsNull() {
				in.Skip()
				out.CancelPenalties = nil
			} else {
				in.Delim('[')
				if out.CancelPenalties == nil {
					if !in.IsDelim(']') {
						out.CancelPenalties = make([]domainHotelCommon.CancelPenalty, 0, 1)
					} else {
						out.CancelPenalties = []domainHotelCommon.CancelPenalty{}
					}
				} else {
					out.CancelPenalties = (out.CancelPenalties)[:0]
				}
				for !in.IsDelim(']') {
					var v19 domainHotelCommon.CancelPenalty
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon6(in, &v19)
					out.CancelPenalties = append(out.CancelPenalties, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon5(out *jwriter.Writer, in domainHotelCommon.CancelPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"refundable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Refundable))
	}
	{
		const prefix string = ",\"cancelPenalties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CancelPenalties == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.CancelPenalties {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon6(out, v21)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon6(in *jlexer.Lexer, out *domainHotelCommon.CancelPenalty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hoursBefore":
			out.HoursBefore = int(in.Int())
		case "penaltyType":
			out.Type = domainHotelCommon.CancelPenaltyType(in.String())
		case "currency":
			out.Currency = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon6(out *jwriter.Writer, in domainHotelCommon.CancelPenalty) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hoursBefore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HoursBefore))
	}
	{
		const prefix string = ",\"penaltyType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon4(in *jlexer.Lexer, out *domainHotelCommon.Surcharge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChargeType":
			out.ChargeType = domainHotelCommon.ChargeType(in.String())
		case "Mandatory":
			out.Mandatory = bool(in.Bool())
		case "Price":
			easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(in, &out.Price)
		case "Description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon4(out *jwriter.Writer, in domainHotelCommon.Surcharge) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChargeType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChargeType))
	}
	{
		const prefix string = ",\"Mandatory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mandatory))
	}
	{
		const prefix string = ",\"Price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(out, in.Price)
	}
	{
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon3(in *jlexer.Lexer, out *domainHotelCommon.Supplement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(string)
				}
				*out.Code = string(in.String())
			}
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "Description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "SupplementType":
			out.SupplementType = domainHotelCommon.SupplementType(in.String())
		case "ChargeType":
			out.ChargeType = domainHotelCommon.ChargeType(in.String())
		case "Mandatory":
			out.Mandatory = bool(in.Bool())
		case "DurationType":
			if in.IsNull() {
				in.Skip()
				out.DurationType = nil
			} else {
				if out.DurationType == nil {
					out.DurationType = new(domainHotelCommon.DurationType)
				}
				*out.DurationType = domainHotelCommon.DurationType(in.String())
			}
		case "Quantity":
			if in.IsNull() {
				in.Skip()
				out.Quantity = nil
			} else {
				if out.Quantity == nil {
					out.Quantity = new(int)
				}
				*out.Quantity = int(in.Int())
			}
		case "Unit":
			if in.IsNull() {
				in.Skip()
				out.Unit = nil
			} else {
				if out.Unit == nil {
					out.Unit = new(domainHotelCommon.UnitTimeType)
				}
				*out.Unit = domainHotelCommon.UnitTimeType(in.String())
			}
		case "EffectiveDate":
			if in.IsNull() {
				in.Skip()
				out.EffectiveDate = nil
			} else {
				if out.EffectiveDate == nil {
					out.EffectiveDate = new(string)
				}
				*out.EffectiveDate = string(in.String())
			}
		case "ExpireDate":
			if in.IsNull() {
				in.Skip()
				out.ExpireDate = nil
			} else {
				if out.ExpireDate == nil {
					out.ExpireDate = new(string)
				}
				*out.ExpireDate = string(in.String())
			}
		case "Resort":
			if in.IsNull() {
				in.Skip()
				out.Resort = nil
			} else {
				if out.Resort == nil {
					out.Resort = new(domainHotelCommon.Resort)
				}
				easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon7(in, out.Resort)
			}
		case "Price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(domainHotelCommon.Price)
				}
				easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(in, out.Price)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon3(out *jwriter.Writer, in domainHotelCommon.Supplement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Code == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Code))
		}
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"SupplementType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SupplementType))
	}
	{
		const prefix string = ",\"ChargeType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChargeType))
	}
	{
		const prefix string = ",\"Mandatory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mandatory))
	}
	{
		const prefix string = ",\"DurationType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DurationType == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DurationType))
		}
	}
	{
		const prefix string = ",\"Quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Quantity == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Quantity))
		}
	}
	{
		const prefix string = ",\"Unit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Unit == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Unit))
		}
	}
	{
		const prefix string = ",\"EffectiveDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.EffectiveDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.EffectiveDate))
		}
	}
	{
		const prefix string = ",\"ExpireDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ExpireDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ExpireDate))
		}
	}
	{
		const prefix string = ",\"Resort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Resort == nil {
			out.RawString("null")
		} else {
			easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon7(out, *in.Resort)
		}
	}
	{
		const prefix string = ",\"Price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Price == nil {
			out.RawString("null")
		} else {
			easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(out, *in.Price)
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon7(in *jlexer.Lexer, out *domainHotelCommon.Resort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = string(in.String())
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "Description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon7(out *jwriter.Writer, in domainHotelCommon.Resort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(in *jlexer.Lexer, out *domainHotelCommon.Price) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "binding":
			out.Binding = bool(in.Bool())
		case "net":
			out.Net = float64(in.Float64())
		case "gross":
			out.Gross = float64(in.Float64())
		case "exchange":
			easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon8(in, &out.Exchange)
		case "markups":
			if in.IsNull() {
				in.Skip()
				out.Markups = nil
			} else {
				in.Delim('[')
				if out.Markups == nil {
					if !in.IsDelim(']') {
						out.Markups = make([]domainHotelCommon.Markup, 0, 1)
					} else {
						out.Markups = []domainHotelCommon.Markup{}
					}
				} else {
					out.Markups = (out.Markups)[:0]
				}
				for !in.IsDelim(']') {
					var v22 domainHotelCommon.Markup
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon9(in, &v22)
					out.Markups = append(out.Markups, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(out *jwriter.Writer, in domainHotelCommon.Price) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"binding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Binding))
	}
	{
		const prefix string = ",\"net\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Net))
	}
	{
		const prefix string = ",\"gross\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Gross))
	}
	{
		const prefix string = ",\"exchange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon8(out, in.Exchange)
	}
	{
		const prefix string = ",\"markups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Markups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Markups {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon9(out, v24)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon9(in *jlexer.Lexer, out *domainHotelCommon.Markup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(string)
				}
				*out.Channel = string(in.String())
			}
		case "currency":
			out.Currency = string(in.String())
		case "binding":
			out.Binding = bool(in.Bool())
		case "net":
			out.Net = float64(in.Float64())
		case "gross":
			out.Gross = float64(in.Float64())
		case "exchange":
			easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon8(in, &out.Exchange)
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]domainHotelCommon.Rule, 0, 1)
					} else {
						out.Rules = []domainHotelCommon.Rule{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v25 domainHotelCommon.Rule
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon10(in, &v25)
					out.Rules = append(out.Rules, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon9(out *jwriter.Writer, in domainHotelCommon.Markup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Channel == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Channel))
		}
	}
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"binding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Binding))
	}
	{
		const prefix string = ",\"net\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Net))
	}
	{
		const prefix string = ",\"gross\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Gross))
	}
	{
		const prefix string = ",\"exchange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon8(out, in.Exchange)
	}
	{
		const prefix string = ",\"rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Rules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Rules {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon10(out, v27)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon10(in *jlexer.Lexer, out *domainHotelCommon.Rule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = string(in.String())
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "Type":
			out.Type = domainHotelCommon.MarkupRuleType(in.String())
		case "Value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon10(out *jwriter.Writer, in domainHotelCommon.Rule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon8(in *jlexer.Lexer, out *domainHotelCommon.Exchange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "rate":
			out.Rate = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon8(out *jwriter.Writer, in domainHotelCommon.Exchange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Rate))
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon1(in *jlexer.Lexer, out *domainHotelCommon.Room) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "occupancyRefId":
			out.OccupancyRefID = int(in.Int())
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(string)
				}
				*out.Code = string(in.String())
			}
		case "OriginalCode":
			out.OriginalCode = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "refundable":
			if in.IsNull() {
				in.Skip()
				out.Refundable = nil
			} else {
				if out.Refundable == nil {
					out.Refundable = new(bool)
				}
				*out.Refundable = bool(in.Bool())
			}
		case "units":
			if in.IsNull() {
				in.Skip()
				out.Units = nil
			} else {
				if out.Units == nil {
					out.Units = new(int)
				}
				*out.Units = int(in.Int())
			}
		case "roomPrice":
			easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon11(in, &out.RoomPrice)
		case "beds":
			if in.IsNull() {
				in.Skip()
				out.Beds = nil
			} else {
				in.Delim('[')
				if out.Beds == nil {
					if !in.IsDelim(']') {
						out.Beds = make([]domainHotelCommon.Bed, 0, 2)
					} else {
						out.Beds = []domainHotelCommon.Bed{}
					}
				} else {
					out.Beds = (out.Beds)[:0]
				}
				for !in.IsDelim(']') {
					var v28 domainHotelCommon.Bed
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon12(in, &v28)
					out.Beds = append(out.Beds, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ratePlans":
			if in.IsNull() {
				in.Skip()
				out.RatePlans = nil
			} else {
				in.Delim('[')
				if out.RatePlans == nil {
					if !in.IsDelim(']') {
						out.RatePlans = make([]domainHotelCommon.RatePlan, 0, 1)
					} else {
						out.RatePlans = []domainHotelCommon.RatePlan{}
					}
				} else {
					out.RatePlans = (out.RatePlans)[:0]
				}
				for !in.IsDelim(']') {
					var v29 domainHotelCommon.RatePlan
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon13(in, &v29)
					out.RatePlans = append(out.RatePlans, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "promotions":
			if in.IsNull() {
				in.Skip()
				out.Promotions = nil
			} else {
				in.Delim('[')
				if out.Promotions == nil {
					if !in.IsDelim(']') {
						out.Promotions = make([]domainHotelCommon.Promotion, 0, 1)
					} else {
						out.Promotions = []domainHotelCommon.Promotion{}
					}
				} else {
					out.Promotions = (out.Promotions)[:0]
				}
				for !in.IsDelim(']') {
					var v30 domainHotelCommon.Promotion
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon14(in, &v30)
					out.Promotions = append(out.Promotions, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon1(out *jwriter.Writer, in domainHotelCommon.Room) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"occupancyRefId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OccupancyRefID))
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Code == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Code))
		}
	}
	{
		const prefix string = ",\"OriginalCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginalCode))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"refundable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Refundable == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Refundable))
		}
	}
	{
		const prefix string = ",\"units\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Units == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Units))
		}
	}
	{
		const prefix string = ",\"roomPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon11(out, in.RoomPrice)
	}
	{
		const prefix string = ",\"beds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Beds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.Beds {
				if v31 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon12(out, v32)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ratePlans\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RatePlans == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.RatePlans {
				if v33 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon13(out, v34)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"promotions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Promotions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Promotions {
				if v35 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon14(out, v36)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon14(in *jlexer.Lexer, out *domainHotelCommon.Promotion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = string(in.String())
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "EffectiveDate":
			if in.IsNull() {
				in.Skip()
				out.EffectiveDate = nil
			} else {
				if out.EffectiveDate == nil {
					out.EffectiveDate = new(string)
				}
				*out.EffectiveDate = string(in.String())
			}
		case "ExpireDate":
			if in.IsNull() {
				in.Skip()
				out.ExpireDate = nil
			} else {
				if out.ExpireDate == nil {
					out.ExpireDate = new(string)
				}
				*out.ExpireDate = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon14(out *jwriter.Writer, in domainHotelCommon.Promotion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"EffectiveDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.EffectiveDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.EffectiveDate))
		}
	}
	{
		const prefix string = ",\"ExpireDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ExpireDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ExpireDate))
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon13(in *jlexer.Lexer, out *domainHotelCommon.RatePlan) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(string)
				}
				*out.Code = string(in.String())
			}
		case "OriginalCode":
			out.OriginalCode = string(in.String())
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "EffectiveDate":
			if in.IsNull() {
				in.Skip()
				out.EffectiveDate = nil
			} else {
				if out.EffectiveDate == nil {
					out.EffectiveDate = new(string)
				}
				*out.EffectiveDate = string(in.String())
			}
		case "ExpireDate":
			if in.IsNull() {
				in.Skip()
				out.ExpireDate = nil
			} else {
				if out.ExpireDate == nil {
					out.ExpireDate = new(string)
				}
				*out.ExpireDate = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon13(out *jwriter.Writer, in domainHotelCommon.RatePlan) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Code == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Code))
		}
	}
	{
		const prefix string = ",\"OriginalCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginalCode))
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"EffectiveDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.EffectiveDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.EffectiveDate))
		}
	}
	{
		const prefix string = ",\"ExpireDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ExpireDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ExpireDate))
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon12(in *jlexer.Lexer, out *domainHotelCommon.Bed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "Description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "Count":
			if in.IsNull() {
				in.Skip()
				out.Count = nil
			} else {
				if out.Count == nil {
					out.Count = new(int)
				}
				*out.Count = int(in.Int())
			}
		case "Shared":
			if in.IsNull() {
				in.Skip()
				out.Shared = nil
			} else {
				if out.Shared == nil {
					out.Shared = new(bool)
				}
				*out.Shared = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon12(out *jwriter.Writer, in domainHotelCommon.Bed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	{
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"Count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Count == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Count))
		}
	}
	{
		const prefix string = ",\"Shared\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Shared == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Shared))
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon11(in *jlexer.Lexer, out *domainHotelCommon.RoomPrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(in, &out.Price)
		case "breakdowns":
			if in.IsNull() {
				in.Skip()
				out.Breakdown = nil
			} else {
				in.Delim('[')
				if out.Breakdown == nil {
					if !in.IsDelim(']') {
						out.Breakdown = make([]domainHotelCommon.PriceBreakDown, 0, 1)
					} else {
						out.Breakdown = []domainHotelCommon.PriceBreakDown{}
					}
				} else {
					out.Breakdown = (out.Breakdown)[:0]
				}
				for !in.IsDelim(']') {
					var v37 domainHotelCommon.PriceBreakDown
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon15(in, &v37)
					out.Breakdown = append(out.Breakdown, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon11(out *jwriter.Writer, in domainHotelCommon.RoomPrice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(out, in.Price)
	}
	{
		const prefix string = ",\"breakdowns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Breakdown == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Breakdown {
				if v38 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon15(out, v39)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon15(in *jlexer.Lexer, out *domainHotelCommon.PriceBreakDown) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "effectiveDate":
			out.EffectiveDate = string(in.String())
		case "expireDate":
			out.ExpireDate = string(in.String())
		case "price":
			easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(in, &out.Price)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon15(out *jwriter.Writer, in domainHotelCommon.PriceBreakDown) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"effectiveDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EffectiveDate))
	}
	{
		const prefix string = ",\"expireDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpireDate))
	}
	{
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon2(out, in.Price)
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon(in *jlexer.Lexer, out *domainHotelCommon.Occupancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "paxes":
			if in.IsNull() {
				in.Skip()
				out.Paxes = nil
			} else {
				in.Delim('[')
				if out.Paxes == nil {
					if !in.IsDelim(']') {
						out.Paxes = make([]domainHotelCommon.Pax, 0, 8)
					} else {
						out.Paxes = []domainHotelCommon.Pax{}
					}
				} else {
					out.Paxes = (out.Paxes)[:0]
				}
				for !in.IsDelim(']') {
					var v40 domainHotelCommon.Pax
					easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon16(in, &v40)
					out.Paxes = append(out.Paxes, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon(out *jwriter.Writer, in domainHotelCommon.Occupancy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"paxes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Paxes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Paxes {
				if v41 > 0 {
					out.RawByte(',')
				}
				easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon16(out, v42)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2f5a9aebDecodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon16(in *jlexer.Lexer, out *domainHotelCommon.Pax) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "age":
			out.Age = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f5a9aebEncodeGithubComTravelgateXPresentersBenchmarkPkgDomainHotelCommon16(out *jwriter.Writer, in domainHotelCommon.Pax) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Age))
	}
	out.RawByte('}')
}
