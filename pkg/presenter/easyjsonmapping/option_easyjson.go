// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.
package easyjsonmapping

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson(in *jlexer.Lexer, out *Surcharge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chargeType":
			out.ChargeType = string(in.String())
		case "mandatory":
			out.Mandatory = bool(in.Bool())
		case "price":
			(out.Price).UnmarshalEasyJSON(in)
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson(out *jwriter.Writer, in Surcharge) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChargeType != "" {
		const prefix string = ",\"chargeType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChargeType))
	}
	if in.Mandatory {
		const prefix string = ",\"mandatory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mandatory))
	}
	if true {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Price).MarshalEasyJSON(out)
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Surcharge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Surcharge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Surcharge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Surcharge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson1(in *jlexer.Lexer, out *Supplement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "supplementType":
			out.SupplementType = string(in.String())
		case "chargeType":
			out.ChargeType = string(in.String())
		case "mandatory":
			out.Mandatory = bool(in.Bool())
		case "durationType":
			if in.IsNull() {
				in.Skip()
				out.DurationType = nil
			} else {
				if out.DurationType == nil {
					out.DurationType = new(string)
				}
				*out.DurationType = string(in.String())
			}
		case "quantity":
			if in.IsNull() {
				in.Skip()
				out.Quantity = nil
			} else {
				if out.Quantity == nil {
					out.Quantity = new(int)
				}
				*out.Quantity = int(in.Int())
			}
		case "unit":
			if in.IsNull() {
				in.Skip()
				out.Unit = nil
			} else {
				if out.Unit == nil {
					out.Unit = new(string)
				}
				*out.Unit = string(in.String())
			}
		case "effectiveDate":
			if in.IsNull() {
				in.Skip()
				out.EffectiveDate = nil
			} else {
				if out.EffectiveDate == nil {
					out.EffectiveDate = new(string)
				}
				*out.EffectiveDate = string(in.String())
			}
		case "expireDate":
			if in.IsNull() {
				in.Skip()
				out.ExpireDate = nil
			} else {
				if out.ExpireDate == nil {
					out.ExpireDate = new(string)
				}
				*out.ExpireDate = string(in.String())
			}
		case "resort":
			if in.IsNull() {
				in.Skip()
				out.Resort = nil
			} else {
				if out.Resort == nil {
					out.Resort = new(Resort)
				}
				(*out.Resort).UnmarshalEasyJSON(in)
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(Price)
				}
				(*out.Price).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson1(out *jwriter.Writer, in Supplement) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != "" {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.SupplementType != "" {
		const prefix string = ",\"supplementType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SupplementType))
	}
	if in.ChargeType != "" {
		const prefix string = ",\"chargeType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChargeType))
	}
	if in.Mandatory {
		const prefix string = ",\"mandatory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mandatory))
	}
	if in.DurationType != nil {
		const prefix string = ",\"durationType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DurationType))
	}
	if in.Quantity != nil {
		const prefix string = ",\"quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.Quantity))
	}
	if in.Unit != nil {
		const prefix string = ",\"unit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Unit))
	}
	if in.EffectiveDate != nil {
		const prefix string = ",\"effectiveDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EffectiveDate))
	}
	if in.ExpireDate != nil {
		const prefix string = ",\"expireDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ExpireDate))
	}
	if in.Resort != nil {
		const prefix string = ",\"resort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Resort).MarshalEasyJSON(out)
	}
	if in.Price != nil {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Price).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Supplement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Supplement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Supplement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Supplement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson1(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson2(in *jlexer.Lexer, out *Rule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson2(out *jwriter.Writer, in Rule) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson2(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson3(in *jlexer.Lexer, out *RoomPrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			(out.Price).UnmarshalEasyJSON(in)
		case "breakdown":
			if in.IsNull() {
				in.Skip()
				out.Breakdown = nil
			} else {
				in.Delim('[')
				if out.Breakdown == nil {
					if !in.IsDelim(']') {
						out.Breakdown = make([]PriceBreakdown, 0, 1)
					} else {
						out.Breakdown = []PriceBreakdown{}
					}
				} else {
					out.Breakdown = (out.Breakdown)[:0]
				}
				for !in.IsDelim(']') {
					var v1 PriceBreakdown
					(v1).UnmarshalEasyJSON(in)
					out.Breakdown = append(out.Breakdown, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson3(out *jwriter.Writer, in RoomPrice) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Price).MarshalEasyJSON(out)
	}
	if len(in.Breakdown) != 0 {
		const prefix string = ",\"breakdown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Breakdown {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoomPrice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoomPrice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoomPrice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoomPrice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson3(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson4(in *jlexer.Lexer, out *Room) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "occupancyRefId":
			out.OccupancyRefId = int(in.Int())
		case "code":
			out.Code = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "refundable":
			if in.IsNull() {
				in.Skip()
				out.Refundable = nil
			} else {
				if out.Refundable == nil {
					out.Refundable = new(bool)
				}
				*out.Refundable = bool(in.Bool())
			}
		case "units":
			if in.IsNull() {
				in.Skip()
				out.Units = nil
			} else {
				if out.Units == nil {
					out.Units = new(int)
				}
				*out.Units = int(in.Int())
			}
		case "roomPrice":
			(out.RoomPrice).UnmarshalEasyJSON(in)
		case "beds":
			if in.IsNull() {
				in.Skip()
				out.Beds = nil
			} else {
				in.Delim('[')
				if out.Beds == nil {
					if !in.IsDelim(']') {
						out.Beds = make([]Bed, 0, 2)
					} else {
						out.Beds = []Bed{}
					}
				} else {
					out.Beds = (out.Beds)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Bed
					(v4).UnmarshalEasyJSON(in)
					out.Beds = append(out.Beds, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ratePlans":
			if in.IsNull() {
				in.Skip()
				out.RatePlans = nil
			} else {
				in.Delim('[')
				if out.RatePlans == nil {
					if !in.IsDelim(']') {
						out.RatePlans = make([]RatePlan, 0, 1)
					} else {
						out.RatePlans = []RatePlan{}
					}
				} else {
					out.RatePlans = (out.RatePlans)[:0]
				}
				for !in.IsDelim(']') {
					var v5 RatePlan
					(v5).UnmarshalEasyJSON(in)
					out.RatePlans = append(out.RatePlans, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "promotions":
			if in.IsNull() {
				in.Skip()
				out.Promotions = nil
			} else {
				in.Delim('[')
				if out.Promotions == nil {
					if !in.IsDelim(']') {
						out.Promotions = make([]Promotion, 0, 1)
					} else {
						out.Promotions = []Promotion{}
					}
				} else {
					out.Promotions = (out.Promotions)[:0]
				}
				for !in.IsDelim(']') {
					var v6 Promotion
					(v6).UnmarshalEasyJSON(in)
					out.Promotions = append(out.Promotions, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson4(out *jwriter.Writer, in Room) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OccupancyRefId != 0 {
		const prefix string = ",\"occupancyRefId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OccupancyRefId))
	}
	if in.Code != "" {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Refundable != nil {
		const prefix string = ",\"refundable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Refundable))
	}
	if in.Units != nil {
		const prefix string = ",\"units\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.Units))
	}
	if true {
		const prefix string = ",\"roomPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.RoomPrice).MarshalEasyJSON(out)
	}
	if len(in.Beds) != 0 {
		const prefix string = ",\"beds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Beds {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.RatePlans) != 0 {
		const prefix string = ",\"ratePlans\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.RatePlans {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Promotions) != 0 {
		const prefix string = ",\"promotions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Promotions {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Room) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Room) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Room) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Room) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson4(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson5(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			easyjson2f5a9aebDecode(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson5(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncode(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson5(l, v)
}

func easyjson2f5a9aebDecode(in *jlexer.Lexer, out *struct {
	HotelX struct {
		Search struct {
			Options []Option `json:"options"`
			Errors  struct {
				Code        string `json:"code"`
				Type        string `json:"type"`
				Description string `json:"description"`
			} `json:"errors"`
		} `json:"search"`
	} `json:"hotelX"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hotelX":
			easyjson2f5a9aebDecode1(in, &out.HotelX)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncode(out *jwriter.Writer, in struct {
	HotelX struct {
		Search struct {
			Options []Option `json:"options"`
			Errors  struct {
				Code        string `json:"code"`
				Type        string `json:"type"`
				Description string `json:"description"`
			} `json:"errors"`
		} `json:"search"`
	} `json:"hotelX"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"hotelX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncode1(out, in.HotelX)
	}
	out.RawByte('}')
}

func easyjson2f5a9aebDecode1(in *jlexer.Lexer, out *struct {
	Search struct {
		Options []Option `json:"options"`
		Errors  struct {
			Code        string `json:"code"`
			Type        string `json:"type"`
			Description string `json:"description"`
		} `json:"errors"`
	} `json:"search"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "search":
			easyjson2f5a9aebDecode2(in, &out.Search)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncode1(out *jwriter.Writer, in struct {
	Search struct {
		Options []Option `json:"options"`
		Errors  struct {
			Code        string `json:"code"`
			Type        string `json:"type"`
			Description string `json:"description"`
		} `json:"errors"`
	} `json:"search"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"search\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncode2(out, in.Search)
	}
	out.RawByte('}')
}

func easyjson2f5a9aebDecode2(in *jlexer.Lexer, out *struct {
	Options []Option `json:"options"`
	Errors  struct {
		Code        string `json:"code"`
		Type        string `json:"type"`
		Description string `json:"description"`
	} `json:"errors"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				in.Delim('[')
				if out.Options == nil {
					if !in.IsDelim(']') {
						out.Options = make([]Option, 0, 1)
					} else {
						out.Options = []Option{}
					}
				} else {
					out.Options = (out.Options)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Option
					(v13).UnmarshalEasyJSON(in)
					out.Options = append(out.Options, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errors":
			easyjson2f5a9aebDecode3(in, &out.Errors)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncode2(out *jwriter.Writer, in struct {
	Options []Option `json:"options"`
	Errors  struct {
		Code        string `json:"code"`
		Type        string `json:"type"`
		Description string `json:"description"`
	} `json:"errors"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Options) != 0 {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Options {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2f5a9aebEncode3(out, in.Errors)
	}
	out.RawByte('}')
}

func easyjson2f5a9aebDecode3(in *jlexer.Lexer, out *struct {
	Code        string `json:"code"`
	Type        string `json:"type"`
	Description string `json:"description"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncode3(out *jwriter.Writer, in struct {
	Code        string `json:"code"`
	Type        string `json:"type"`
	Description string `json:"description"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != "" {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson6(in *jlexer.Lexer, out *Resort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson6(out *jwriter.Writer, in Resort) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != "" {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Resort) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Resort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Resort) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Resort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson6(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson7(in *jlexer.Lexer, out *RatePlan) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "effectiveDate":
			if in.IsNull() {
				in.Skip()
				out.EffectiveDate = nil
			} else {
				if out.EffectiveDate == nil {
					out.EffectiveDate = new(string)
				}
				*out.EffectiveDate = string(in.String())
			}
		case "expireDate":
			if in.IsNull() {
				in.Skip()
				out.ExpireDate = nil
			} else {
				if out.ExpireDate == nil {
					out.ExpireDate = new(string)
				}
				*out.ExpireDate = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson7(out *jwriter.Writer, in RatePlan) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != "" {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.EffectiveDate != nil {
		const prefix string = ",\"effectiveDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EffectiveDate))
	}
	if in.ExpireDate != nil {
		const prefix string = ",\"expireDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ExpireDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RatePlan) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RatePlan) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RatePlan) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RatePlan) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson7(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson8(in *jlexer.Lexer, out *Promotion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "effectiveDate":
			if in.IsNull() {
				in.Skip()
				out.EffectiveDate = nil
			} else {
				if out.EffectiveDate == nil {
					out.EffectiveDate = new(string)
				}
				*out.EffectiveDate = string(in.String())
			}
		case "expireDate":
			if in.IsNull() {
				in.Skip()
				out.ExpireDate = nil
			} else {
				if out.ExpireDate == nil {
					out.ExpireDate = new(string)
				}
				*out.ExpireDate = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson8(out *jwriter.Writer, in Promotion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != "" {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.EffectiveDate != nil {
		const prefix string = ",\"effectiveDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EffectiveDate))
	}
	if in.ExpireDate != nil {
		const prefix string = ",\"expireDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ExpireDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Promotion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Promotion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Promotion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Promotion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson8(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson9(in *jlexer.Lexer, out *PriceBreakdown) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "effectiveDate":
			out.EffectiveDate = string(in.String())
		case "expireDate":
			out.ExpireDate = string(in.String())
		case "price":
			(out.Price).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson9(out *jwriter.Writer, in PriceBreakdown) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EffectiveDate != "" {
		const prefix string = ",\"effectiveDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EffectiveDate))
	}
	if in.ExpireDate != "" {
		const prefix string = ",\"expireDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpireDate))
	}
	if true {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Price).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceBreakdown) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceBreakdown) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceBreakdown) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceBreakdown) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson9(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson10(in *jlexer.Lexer, out *Price) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "binding":
			out.Binding = bool(in.Bool())
		case "net":
			out.Net = float64(in.Float64())
		case "gross":
			if in.IsNull() {
				in.Skip()
				out.Gross = nil
			} else {
				if out.Gross == nil {
					out.Gross = new(float64)
				}
				*out.Gross = float64(in.Float64())
			}
		case "exchange":
			(out.Exchange).UnmarshalEasyJSON(in)
		case "markups":
			if in.IsNull() {
				in.Skip()
				out.Markups = nil
			} else {
				in.Delim('[')
				if out.Markups == nil {
					if !in.IsDelim(']') {
						out.Markups = make([]Markup, 0, 1)
					} else {
						out.Markups = []Markup{}
					}
				} else {
					out.Markups = (out.Markups)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Markup
					(v16).UnmarshalEasyJSON(in)
					out.Markups = append(out.Markups, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson10(out *jwriter.Writer, in Price) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Binding {
		const prefix string = ",\"binding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Binding))
	}
	if in.Net != 0 {
		const prefix string = ",\"net\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Net))
	}
	if in.Gross != nil {
		const prefix string = ",\"gross\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.Gross))
	}
	if true {
		const prefix string = ",\"exchange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Exchange).MarshalEasyJSON(out)
	}
	if len(in.Markups) != 0 {
		const prefix string = ",\"markups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Markups {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Price) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Price) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Price) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Price) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson10(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson11(in *jlexer.Lexer, out *Pax) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "age":
			out.Age = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson11(out *jwriter.Writer, in Pax) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Age))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pax) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pax) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pax) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pax) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson11(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson12(in *jlexer.Lexer, out *Option) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "supplierCode":
			out.SupplierCode = string(in.String())
		case "accessCode":
			out.AccessCode = string(in.String())
		case "market":
			out.Market = string(in.String())
		case "hotelCode":
			out.HotelCode = string(in.String())
		case "hotelCodeSupplier":
			out.HotelCodeSupplier = string(in.String())
		case "hotelName":
			if in.IsNull() {
				in.Skip()
				out.HotelName = nil
			} else {
				if out.HotelName == nil {
					out.HotelName = new(string)
				}
				*out.HotelName = string(in.String())
			}
		case "boardCode":
			out.BoardCode = string(in.String())
		case "boardCodeSupplier":
			out.BoardCodeSupplier = string(in.String())
		case "paymentType":
			out.PaymentType = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "occupancies":
			if in.IsNull() {
				in.Skip()
				out.Occupancies = nil
			} else {
				in.Delim('[')
				if out.Occupancies == nil {
					if !in.IsDelim(']') {
						out.Occupancies = make([]Occupancy, 0, 2)
					} else {
						out.Occupancies = []Occupancy{}
					}
				} else {
					out.Occupancies = (out.Occupancies)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Occupancy
					(v19).UnmarshalEasyJSON(in)
					out.Occupancies = append(out.Occupancies, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rooms":
			if in.IsNull() {
				in.Skip()
				out.Rooms = nil
			} else {
				in.Delim('[')
				if out.Rooms == nil {
					if !in.IsDelim(']') {
						out.Rooms = make([]Room, 0, 1)
					} else {
						out.Rooms = []Room{}
					}
				} else {
					out.Rooms = (out.Rooms)[:0]
				}
				for !in.IsDelim(']') {
					var v20 Room
					(v20).UnmarshalEasyJSON(in)
					out.Rooms = append(out.Rooms, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "price":
			(out.Price).UnmarshalEasyJSON(in)
		case "supplements":
			if in.IsNull() {
				in.Skip()
				out.Supplements = nil
			} else {
				in.Delim('[')
				if out.Supplements == nil {
					if !in.IsDelim(']') {
						out.Supplements = make([]Supplement, 0, 1)
					} else {
						out.Supplements = []Supplement{}
					}
				} else {
					out.Supplements = (out.Supplements)[:0]
				}
				for !in.IsDelim(']') {
					var v21 Supplement
					(v21).UnmarshalEasyJSON(in)
					out.Supplements = append(out.Supplements, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "surcharges":
			if in.IsNull() {
				in.Skip()
				out.Surcharges = nil
			} else {
				in.Delim('[')
				if out.Surcharges == nil {
					if !in.IsDelim(']') {
						out.Surcharges = make([]Surcharge, 0, 1)
					} else {
						out.Surcharges = []Surcharge{}
					}
				} else {
					out.Surcharges = (out.Surcharges)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Surcharge
					(v22).UnmarshalEasyJSON(in)
					out.Surcharges = append(out.Surcharges, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rateRules":
			if in.IsNull() {
				in.Skip()
				out.RateRules = nil
			} else {
				in.Delim('[')
				if out.RateRules == nil {
					if !in.IsDelim(']') {
						out.RateRules = make([]string, 0, 4)
					} else {
						out.RateRules = []string{}
					}
				} else {
					out.RateRules = (out.RateRules)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.RateRules = append(out.RateRules, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancelPolicy":
			if in.IsNull() {
				in.Skip()
				out.CancelPolicy = nil
			} else {
				if out.CancelPolicy == nil {
					out.CancelPolicy = new(CancelPolicy)
				}
				(*out.CancelPolicy).UnmarshalEasyJSON(in)
			}
		case "remarks":
			if in.IsNull() {
				in.Skip()
				out.Remarks = nil
			} else {
				if out.Remarks == nil {
					out.Remarks = new(string)
				}
				*out.Remarks = string(in.String())
			}
		case "token":
			out.Token = string(in.String())
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson12(out *jwriter.Writer, in Option) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SupplierCode != "" {
		const prefix string = ",\"supplierCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SupplierCode))
	}
	if in.AccessCode != "" {
		const prefix string = ",\"accessCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessCode))
	}
	if in.Market != "" {
		const prefix string = ",\"market\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Market))
	}
	if in.HotelCode != "" {
		const prefix string = ",\"hotelCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HotelCode))
	}
	if in.HotelCodeSupplier != "" {
		const prefix string = ",\"hotelCodeSupplier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HotelCodeSupplier))
	}
	if in.HotelName != nil {
		const prefix string = ",\"hotelName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.HotelName))
	}
	if in.BoardCode != "" {
		const prefix string = ",\"boardCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BoardCode))
	}
	if in.BoardCodeSupplier != "" {
		const prefix string = ",\"boardCodeSupplier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BoardCodeSupplier))
	}
	if in.PaymentType != "" {
		const prefix string = ",\"paymentType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PaymentType))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if len(in.Occupancies) != 0 {
		const prefix string = ",\"occupancies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Occupancies {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Rooms) != 0 {
		const prefix string = ",\"rooms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Rooms {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Price).MarshalEasyJSON(out)
	}
	if len(in.Supplements) != 0 {
		const prefix string = ",\"supplements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Supplements {
				if v28 > 0 {
					out.RawByte(',')
				}
				(v29).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Surcharges) != 0 {
		const prefix string = ",\"surcharges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Surcharges {
				if v30 > 0 {
					out.RawByte(',')
				}
				(v31).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.RateRules) != 0 {
		const prefix string = ",\"rateRules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.RateRules {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.CancelPolicy != nil {
		const prefix string = ",\"cancelPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CancelPolicy).MarshalEasyJSON(out)
	}
	if in.Remarks != nil {
		const prefix string = ",\"remarks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Remarks))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Option) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Option) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Option) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Option) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson12(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson13(in *jlexer.Lexer, out *Occupancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "paxes":
			if in.IsNull() {
				in.Skip()
				out.Paxes = nil
			} else {
				in.Delim('[')
				if out.Paxes == nil {
					if !in.IsDelim(']') {
						out.Paxes = make([]Pax, 0, 8)
					} else {
						out.Paxes = []Pax{}
					}
				} else {
					out.Paxes = (out.Paxes)[:0]
				}
				for !in.IsDelim(']') {
					var v34 Pax
					(v34).UnmarshalEasyJSON(in)
					out.Paxes = append(out.Paxes, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson13(out *jwriter.Writer, in Occupancy) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	if len(in.Paxes) != 0 {
		const prefix string = ",\"paxes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Paxes {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Occupancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Occupancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Occupancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Occupancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson13(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson14(in *jlexer.Lexer, out *Markup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(string)
				}
				*out.Channel = string(in.String())
			}
		case "currency":
			out.Currency = string(in.String())
		case "binding":
			out.Binding = bool(in.Bool())
		case "net":
			out.Net = float64(in.Float64())
		case "gross":
			if in.IsNull() {
				in.Skip()
				out.Gross = nil
			} else {
				if out.Gross == nil {
					out.Gross = new(float64)
				}
				*out.Gross = float64(in.Float64())
			}
		case "exchange":
			(out.Exchange).UnmarshalEasyJSON(in)
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]Rule, 0, 1)
					} else {
						out.Rules = []Rule{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v37 Rule
					(v37).UnmarshalEasyJSON(in)
					out.Rules = append(out.Rules, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson14(out *jwriter.Writer, in Markup) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Channel))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Binding {
		const prefix string = ",\"binding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Binding))
	}
	if in.Net != 0 {
		const prefix string = ",\"net\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Net))
	}
	if in.Gross != nil {
		const prefix string = ",\"gross\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.Gross))
	}
	if true {
		const prefix string = ",\"exchange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Exchange).MarshalEasyJSON(out)
	}
	if len(in.Rules) != 0 {
		const prefix string = ",\"rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Rules {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Markup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Markup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Markup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Markup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson14(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson15(in *jlexer.Lexer, out *Exchange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "rate":
			out.Rate = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson15(out *jwriter.Writer, in Exchange) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Rate != 0 {
		const prefix string = ",\"rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Rate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Exchange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Exchange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Exchange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Exchange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson15(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson16(in *jlexer.Lexer, out *CancelPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "refundable":
			out.Refundable = bool(in.Bool())
		case "cancelPenalties":
			if in.IsNull() {
				in.Skip()
				out.CancelPenalties = nil
			} else {
				in.Delim('[')
				if out.CancelPenalties == nil {
					if !in.IsDelim(']') {
						out.CancelPenalties = make([]CancelPenalty, 0, 1)
					} else {
						out.CancelPenalties = []CancelPenalty{}
					}
				} else {
					out.CancelPenalties = (out.CancelPenalties)[:0]
				}
				for !in.IsDelim(']') {
					var v40 CancelPenalty
					(v40).UnmarshalEasyJSON(in)
					out.CancelPenalties = append(out.CancelPenalties, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson16(out *jwriter.Writer, in CancelPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Refundable {
		const prefix string = ",\"refundable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Refundable))
	}
	if len(in.CancelPenalties) != 0 {
		const prefix string = ",\"cancelPenalties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.CancelPenalties {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelPolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelPolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelPolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelPolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson16(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson17(in *jlexer.Lexer, out *CancelPenalty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hoursBefore":
			out.HoursBefore = int(in.Int())
		case "penaltyType":
			out.PenaltyType = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson17(out *jwriter.Writer, in CancelPenalty) {
	out.RawByte('{')
	first := true
	_ = first
	if in.HoursBefore != 0 {
		const prefix string = ",\"hoursBefore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HoursBefore))
	}
	if in.PenaltyType != "" {
		const prefix string = ",\"penaltyType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PenaltyType))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelPenalty) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelPenalty) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelPenalty) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelPenalty) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson17(l, v)
}

func easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson18(in *jlexer.Lexer, out *Bed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "count":
			if in.IsNull() {
				in.Skip()
				out.Count = nil
			} else {
				if out.Count == nil {
					out.Count = new(int)
				}
				*out.Count = int(in.Int())
			}
		case "shared":
			if in.IsNull() {
				in.Skip()
				out.Shared = nil
			} else {
				if out.Shared == nil {
					out.Shared = new(bool)
				}
				*out.Shared = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson18(out *jwriter.Writer, in Bed) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Type))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Count != nil {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.Count))
	}
	if in.Shared != nil {
		const prefix string = ",\"shared\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Shared))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f5a9aebEncodePresentersBenchmarkPkgPresenterResteasyjson18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f5a9aebDecodePresentersBenchmarkPkgPresenterResteasyjson18(l, v)
}
